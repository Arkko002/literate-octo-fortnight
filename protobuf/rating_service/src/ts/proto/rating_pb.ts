// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file proto/rating.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message GetRatingRequest
 */
export class GetRatingRequest extends Message<GetRatingRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  constructor(data?: PartialMessage<GetRatingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetRatingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRatingRequest {
    return new GetRatingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRatingRequest {
    return new GetRatingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRatingRequest {
    return new GetRatingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRatingRequest | PlainMessage<GetRatingRequest> | undefined, b: GetRatingRequest | PlainMessage<GetRatingRequest> | undefined): boolean {
    return proto3.util.equals(GetRatingRequest, a, b);
  }
}

/**
 * @generated from message GetRatingResponse
 */
export class GetRatingResponse extends Message<GetRatingResponse> {
  /**
   * @generated from field: string rating = 1;
   */
  rating = "";

  constructor(data?: PartialMessage<GetRatingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetRatingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rating", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRatingResponse {
    return new GetRatingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRatingResponse {
    return new GetRatingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRatingResponse {
    return new GetRatingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRatingResponse | PlainMessage<GetRatingResponse> | undefined, b: GetRatingResponse | PlainMessage<GetRatingResponse> | undefined): boolean {
    return proto3.util.equals(GetRatingResponse, a, b);
  }
}

/**
 * @generated from message SetRatingRequest
 */
export class SetRatingRequest extends Message<SetRatingRequest> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: string rating = 2;
   */
  rating = "";

  constructor(data?: PartialMessage<SetRatingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SetRatingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rating", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRatingRequest {
    return new SetRatingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRatingRequest {
    return new SetRatingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRatingRequest {
    return new SetRatingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRatingRequest | PlainMessage<SetRatingRequest> | undefined, b: SetRatingRequest | PlainMessage<SetRatingRequest> | undefined): boolean {
    return proto3.util.equals(SetRatingRequest, a, b);
  }
}

/**
 * @generated from message SetRatingResponse
 */
export class SetRatingResponse extends Message<SetRatingResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  constructor(data?: PartialMessage<SetRatingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SetRatingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRatingResponse {
    return new SetRatingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRatingResponse {
    return new SetRatingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRatingResponse {
    return new SetRatingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetRatingResponse | PlainMessage<SetRatingResponse> | undefined, b: SetRatingResponse | PlainMessage<SetRatingResponse> | undefined): boolean {
    return proto3.util.equals(SetRatingResponse, a, b);
  }
}

